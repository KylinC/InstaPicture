"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var React = require('react');

module.exports = formData;
/**
 * Creates a higher order component for easier form data handling using React. Especially handy
 * when using global application state and a functional style approach to UI development.
 *
 * By default, `formData` will generate values from every input fields **with ID-attribute**
 * (textarea, input, select) except submit and general buttons. To ignore a input, you can
 * either add a mapper removing it, or simply not add ID. If you want the input to have
 * a different name, you can map it or use the injected `addInput` to explicitly add the
 * form input with a name. This is also useful in cases where you don't want an ID on
 * your input data.
 *
 * The precedence order for naming is: `Manual > Name attribute > ID attribute`
 *
 * Injects the following properties to the decorated component.
 * * `addInput(inputName)` - Manually add input, with data name specified as argument
 * * `ocHook(synteticEvent)` - onChange hook. Use this when you want onChange to be triggered. Most cases every input in your decoratee should have a `onChange={ocHook}`. Is composable
 *
 * @example
 * Using onChange hook to aggregate and create a common onChange listener with data
 * ```jsx
 * // `ocHook` is injected from `formData`:
 * var MyForm = formData(function ({ addInput, ocHook }) {
 *   return (
 *     <ol>
 *       <li><input id="a" type="text" onChange={ocHook} value="Hello World" /></li>
 *       <li><textarea ref={addInput('b')} onChange={ocHook}>Hello World</textarea></li>
 *     </ol>
 *   );
 * });
 * const App = function () {
 *   return <DecoratedMyForm onChange={(values) => console.log(values)} />;
 * };
 * ```
 * Outputs something like
 * ```json
 * {
 *   "a": "Hello World",
 *   "b": "Hello World"
 * }
 * ```
 *
 *
 * Returned formData decorated `Component`: A React Component with the added behaviour of form data handling.
 * All properties passed to decorated component, is transitive. This means it will be passed to the
 * decoratee. In addition, two properties are injected to the decoratee; `addInput` and `ocHook`. @see formData
 *
 * Decorated component has two props callbacks you can use:
 * * `valueMapper(Object) -> Object` - Takes values and returns new mapped values. If you want to transform some of the data before triggering `onChange` or `getData`.
 * * `onChange(Object)` - callback triggered when some of the decoratee triggers the on change hook. Is called with data values as argument.
 *
 * In addition to props, you can use React refs to get the initial value when component is mounted:
 * @example
 * ```jsx
 * <DecoratedForm ref={function (inputRef) {
 *   // Now the node is mounted, and we have a ref to it. We can access data and inputs:
 *   var myFormInputs = inputRef.getInputs();
 *   var myFormData   = inputRef.getValues(); // Will respect value mapper
 *
 *   // You also have access to `addInput`:
 *   addInput('customInput')(ReactDOM.findDOMNode(this).querySelector('.custom'));
 * }} />
 * ```
 *
 * @param {Component} Decoratee - component you'd like to decorate with form data behaviour.
 * @returns {Component} Decorated Component - The newly derived component with additional behaviour.
 **/

function formData(ChildComponent) {
  /**
   * formData decorated `Component`. A React Component with the added behaviour of form data handling.
   * All properties passed to decorated component, is transitive. This means it will be passed to the
   * decoratee. In addition, two properties are injected to the decoratee; `addInput` and `ocHook`. @see formData
   *
   * Decorated component has two props callbacks you can use:
   * * `valueMapper(Object) -> Object` - Takes values and returns new mapped values. If you want to transform some of the data before triggering `onChange` or `getData`.
   * * `onChange(Object)` - callback triggered when some of the decoratee triggers the on change hook. Is called with data values as argument.
   * * `customChange(Object)` - Add custom data to the onChange trigger.
   *
   * In addition to props, you can use React refs to get the initial value when component is mounted:
   * @example
   * ```jsx
   * <DecoratedForm ref={function (inputRef) {
   *   // Now the node is mounted, and we have a ref to it. We can access data and inputs:
   *   var myFormInputs = inputRef.getInputs();
   *   var myFormData   = inputRef.getValues(); // Will respect value mapper
   *
   *   // You also have access to `addInput`:
   *   addInput('customInput')(ReactDOM.findDOMNode(this).querySelector('.custom'));
   * }} />
   * ```
   * @param Properties - Properties to react component
   **/
  return (
    /*#__PURE__*/
    function (_React$Component) {
      _inherits(ReactFormData, _React$Component);

      function ReactFormData(props) {
        var _this;

        _classCallCheck(this, ReactFormData);

        _this = _possibleConstructorReturn(this, _getPrototypeOf(ReactFormData).call(this, props));
        _this.customInputs = {};
        _this.formIsMounted = false;
        return _this;
      }

      _createClass(ReactFormData, [{
        key: "addInput",
        value: function addInput(name) {
          var _this2 = this;

          return function (ref) {
            _this2.customInputs[name] = ref;
          };
        }
      }, {
        key: "getInputs",
        value: function getInputs() {
          if (!this.formIsMounted || !this.wrapperRef) return [];
          return _toConsumableArray(this.wrapperRef.querySelectorAll('input, select, textarea'));
        }
      }, {
        key: "componentDidMount",
        value: function componentDidMount() {
          this.formIsMounted = true;
        }
      }, {
        key: "componentWillUnmount",
        value: function componentWillUnmount() {
          this.formIsMounted = false;
        }
      }, {
        key: "getValues",
        value: function getValues() {
          var _this$props$valueMapp = this.props.valueMapper,
              valueMapper = _this$props$valueMapp === void 0 ? identity : _this$props$valueMapp;
          var values = getValuesFromInputs(this.getInputs(), this.customInputs);
          return valueMapper(Object.assign({}, values, this.customData || {}));
        }
      }, {
        key: "render",
        value: function render() {
          var _this3 = this;

          var _this$props$onChange = this.props.onChange,
              onChange = _this$props$onChange === void 0 ? noop : _this$props$onChange;
          var decoratedElement = React.createElement(ChildComponent, Object.assign({}, this.props, {
            addInput: function addInput(name) {
              return _this3.addInput(name);
            },
            ocHook: function ocHook(e) {
              onChange(_this3.getValues());
              return e;
            },
            customChange: function customChange(data) {
              if (!_this3.customData) {
                _this3.customData = {};
              }

              _this3.customData = Object.assign({}, _this3.customData, data);

              var resultingData = _this3.getValues();

              onChange(resultingData);
              return resultingData;
            }
          }));
          return React.createElement("div", {
            ref: function ref(el) {
              return _this3.wrapperRef = el;
            }
          }, decoratedElement);
        }
      }]);

      return ReactFormData;
    }(React.Component)
  );
}

function getValuesFromInputs(inputs) {
  var extra = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var extraList = toList(extra);
  var both = inputs.concat(extraList);
  var fromInputs = inputs.filter(includableInput).filter(includeItemsNotInList(extraList)).reduce(function (acc, input) {
    return Object.assign({}, acc, _defineProperty({}, filterKey(input.name || input.id), getTypedValue(input, both)));
  }, {});
  var fromExtra = Object.keys(extra).reduce(function (acc, key) {
    return Object.assign({}, acc, _defineProperty({}, filterKey(key), getTypedValue(extra[key], both)));
  }, {});
  return Object.assign({}, fromInputs, fromExtra);
}

function filterKey(key) {
  if (key.indexOf('[]') === -1) return key;
  return key.replace('[]', '');
}

function includableInput(_ref) {
  var type = _ref.type,
      id = _ref.id,
      name = _ref.name;
  var hasNameOrId = !!id || !!name;
  return hasNameOrId && type !== 'submit' && type !== 'button';
}

function includeItemsNotInList(list) {
  return function (item) {
    return !isInList(list, item);
  };
}

function isInList(list, _ref2) {
  var name = _ref2.name,
      id = _ref2.id;
  return list.some(function (_ref3) {
    var oName = _ref3.name,
        oId = _ref3.id;
    return name && name === oName || id && id === oId;
  });
}

function noop() {}

function identity(i) {
  return i;
}

function getTypedValue(input, list) {
  if (input.type === 'number') {
    return parseInt(input.value, 10);
  }

  if (input.type === 'checkbox' && input.name.indexOf('[]') !== -1) {
    return getAllCheckedItemFromListWithName(list, input.name);
  }

  if (input.type === 'checkbox') {
    return input.checked;
  }

  if (input.type === 'radio') {
    return getCheckedItemFromListWithName(list, input.name);
  }

  if (isTag(input, 'select')) {
    return getValueFromSelect(input);
  }

  return input.value;
}

function getValueFromSelect(select) {
  if (!select.multiple) return select.value;
  return _toConsumableArray(select.querySelectorAll('option')).filter(function (item) {
    return item.selected;
  }).map(function (item) {
    return item.value;
  });
}

function getAllCheckedItemFromListWithName(list, name) {
  return list.filter(function (item) {
    return item.checked && item.name === name;
  }).map(function (item) {
    return item.value;
  });
}

function getCheckedItemFromListWithName(list, name) {
  var data = getAllCheckedItemFromListWithName(list, name);
  if (!data) return data;
  return data[0];
}

function isTag(_ref4, expectedTagName) {
  var tagName = _ref4.tagName;
  return tagName && tagName.toLowerCase() === expectedTagName.toLowerCase();
}

function toList(obj) {
  return Object.keys(obj).map(function (k) {
    return obj[k];
  });
}